UP/GoTo - pseudo-código
Nova arquitectura

Google Pixels per Zoom level:
	- 0 until 256 x 2^ZoomLevel
	- ou seja, a nossa gridSize para os níveis do Google são:
	
	google Zoom | pixels | nossa gridSize
	
	
	0	|	256				|	2^8
	1	|	512				|	2^9
	2	|	1 024			|	2^10
	3	|	2 048			|	2^11
	4	|	4 096			|	2^12
	5	|	8 192			|	2^13
	6	|	16 384			|	2^14
	7	|	32 768			|	2^15
	8	|	65 536			|	2^16
	9	|	131 072			|	2^17
	10	|	262 144			|	2^18
	11	|	524 288			|	2^19
	12	|	1 048 576		|	2^20
	13	|	2 097 152		|	2^21
	14	|	4 194 304		|	2^22
	15	|	8 388 608		|	2^23
	16	|	16 777 216		|	2^24
	17	|	33 554 432		|	2^25
	18	|	67 108 864		|	2^26
	19	|	1,34217728×10^8	|	2^27
	20	|	2,68435456×10^8	|	2^28
	
	
	(baseado em: https://developers.google.com/maps/documentation/javascript/maptypes#PixelCoordinates)


1) tendo o raw data-set (ou o anterior) e usando o BD controller (META-Store) para o ir buscar
	1.1) usando a info do BD controller (Meta-Storen - DB, Tabela, Zoom (-1), Bounds, ...)
	1.2) será necessário ir buscar as spatial-expression do nível acima (já computadas no up anterior ou input), e ...
		1.2.1) gerar uma lista de IDs de colisões entre workers.
		1.2.2) essa lista poderá ser passada aos workers
	1.3) efectuar uma partição adequada, tendo por base as BDs.

2) enviar para cada worker uma partição e a lista das expressões que irão colidir

3) em cada worker, ele é responsável por correr a partição e ..
	3.1) /* não necessário */
	3.2) /* não necessário */

	3.3) correr a hash e para os ids com colisão, executar as sinteses:
		3.3.1) em cada IDs / tipo e para cada propriedade
		3.3.2) obter as várias propriedades (coluna) dos IDS
		3.3.3) executar a função da propriedade nos vários valores
		3.3.4) guardar o resultado na propriedade da sintese / tipo

	3.4) /* não necessário */
	3.5) tendo a lista de colisões do 2, enviar para o DB-controler ou logic-worker os pontos, sinteses que colidem com outros workers
	3.6) fazer, em cada worker, escrita na BD de cada ponto/sintese que NÃO TÊM colisão entre workers

(tipo reduce ou 2a volta da sintese)
4) o BD controler ou logic-worker, recebe as colisões de pontos / sinteses entre workers e ...
	4.1) faz novo particionamento destes (e garante que colisões vão para o mesmo worker) e envia para cada worker.
	4.2) em cada worker:
		4.2.1) /* não necessário */ 
		4.2.2) executa os passos do 3.3
		4.2.3) executa a escrita do 3.6
